{"version":3,"sources":["logo.svg","components/Portfolio.js","components/Portfolios.js","components/AddPortfolio.js","components/AddStock.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Portfolio","props","setCurrency","event","isUsd","target","value","setState","usdChecked","toggleCurrency","portfolio","id","state","isChecked","className","this","portfolioname","onChange","bind","class","type","name","checked","onClick","deletePortfolio","stocks","length","map","stock","symbol","shareValue","noShares","totalValue","selectStock","selected","portfolioWorth","openModal","deleteStocks","Component","Portfolios","portfolios","AddPortfolio","isForm","showHideForm","handleChange","handleSubmit","preventDefault","addPortfolio","alert","title","AddStock","addStock","propertyName","show","stockRow","margin","width","textAlign","style","position","top","bottom","left","right","backgroundColor","padding","borderRadius","maxWidth","minHeight","color","onClose","App","isOpen","currentPortfolioID","toggleModal","portfolioID","currentId","concat","localStorage","setItem","JSON","stringify","Object","assign","updatePortfolioWorth","console","log","reduce","a","b","stockSymbol","filter","window","confirm","Math","round","getItem","parse","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e858a7ac.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\r\nimport './Portfolio.css'\r\n\r\nexport class Portfolio extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isChecked: false,\r\n            usdChecked: props.portfolio.isUsd\r\n        }\r\n\r\n    }\r\n\r\n    setCurrency = (event) => {\r\n        const isUsd = event.target.value === 'usd';\r\n        this.setState({\r\n            usdChecked: isUsd\r\n        });\r\n        this.props.toggleCurrency(this.props.portfolio.id, isUsd);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"portfolioHeader\">\r\n                    <div>\r\n                        <label id=\"portfolioNameID\">\r\n                            {this.props.portfolio.portfolioname}\r\n                        </label>\r\n                        <div id=\"stockCurrencyDisplayID\">\r\n                            <label>\r\n                                Shown In:\r\n                        </label>\r\n                            <div onChange={this.setCurrency.bind(this)} class='currencyGroup'>\r\n                                <input type=\"radio\" name={this.props.portfolio.id} value=\"euro\" checked={!this.state.usdChecked} /><b>â‚¬</b>\r\n                                <input type=\"radio\" name={this.props.portfolio.id} value=\"usd\" checked={this.state.usdChecked} /><b>$</b>\r\n                            </div>\r\n                        </div>\r\n                        <div id=\"deletePortfolioID\" onClick={() => this.props.deletePortfolio(this.props.portfolio.id)}>&#x274C;</div>\r\n                    </div>\r\n                </div>\r\n                {this.props.portfolio.stocks.length > 0 ?\r\n                    <div>\r\n                        <table>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <th>Name</th>\r\n                                    <th>Unit Value</th>\r\n                                    <th>Quantity</th>\r\n                                    <th>Total Value</th>\r\n                                    <th>Select</th>\r\n                                </tr>\r\n                                {\r\n                                    this.props.portfolio.stocks ?\r\n                                        this.props.portfolio.stocks.map((stock) => (\r\n                                            <tr>\r\n                                                <td>{stock.symbol}</td>\r\n                                                <td>{stock.shareValue}</td>\r\n                                                <td>{stock.noShares}</td>\r\n                                                <td>{stock.totalValue}</td>\r\n                                                <td><input type=\"checkbox\" onChange={() => this.props.selectStock(stock.symbol, this.props.portfolio.id)} checked={stock.selected} ></input></td>\r\n                                            </tr>\r\n                                        )) : null\r\n                                }\r\n                            </tbody>\r\n                        </table>\r\n                        <div>\r\n                            Total value of portfolio: <b>{this.props.portfolio.portfolioWorth}</b>\r\n                        </div>\r\n                    </div> : <div class='noStocks'> No stocks added yet </div>\r\n                }\r\n                <div className=\"portfolioFooter\">\r\n                    <button id=\"addStockID\" onClick={() => this.props.openModal(this.props.portfolio.id)}>Add Stock</button>\r\n                    <button id=\"perfGraphID\">Perf Graph</button>\r\n                    <button id=\"removeStocksID\" onClick={() => this.props.deleteStocks(this.props.portfolio.id)}>Remove Selected</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Portfolio\r\n","import React, { Component } from 'react'\r\nimport Portfolio from './Portfolio'\r\nimport './Portfolios.css'\r\n\r\nexport class Portfolios extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"grid-container\">\r\n                {this.props.portfolios.map((portfolio) => (\r\n                    <div className=\"grid-item\">\r\n                        <Portfolio portfolio={portfolio} openModal={this.props.openModal} selectStock={this.props.selectStock}\r\n                        deleteStocks={this.props.deleteStocks} deletePortfolio={this.props.deletePortfolio} toggleCurrency={this.props.toggleCurrency}/>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Portfolios\r\n","import React, { Component } from 'react'\r\nimport './AddPortfolio.css'\r\n\r\nexport class AddPortfolio extends Component {\r\n    state = {\r\n        isForm : false,\r\n        portfolioname : ''\r\n    }\r\n    showHideForm = () => {\r\n        const isForm = !this.state.isForm;\r\n        this.setState({\r\n            isForm : isForm,\r\n            portfolioname: ''\r\n        })\r\n    }\r\n    handleChange = (event) => {\r\n        this.setState({portfolioname: event.target.value});\r\n    }\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        if(this.state.portfolioname === '') {\r\n            alert('Enter a name to continue');\r\n            return;\r\n        }\r\n        this.props.addPortfolio(this.state.portfolioname);\r\n        this.setState({portfolioname: ''})\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <button className=\"addNewPortFolio\" title=\"Create New portfolio\"\r\n                    onClick={() => this.showHideForm()}>Create New portfolio</button> \r\n                </div>\r\n                <div>\r\n                {\r\n                    this.state.isForm ? \r\n                    <div>\r\n                        <input type=\"text\" onChange={this.handleChange} value={this.state.portfolioname}/>\r\n                        <input type=\"submit\" onClick={this.handleSubmit} />\r\n                    </div> : null\r\n                }\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddPortfolio\r\n","import React, { Component } from 'react'\r\n\r\nexport class AddStock extends Component {\r\n  state = {\r\n    symbol: '',\r\n    noShares: '',\r\n    shareValue: ''\r\n  }\r\n\r\n  handleSubmit = () => {\r\n    const symbol = this.state.symbol;\r\n    const noShares = this.state.noShares;\r\n    const shareValue = this.state.shareValue;\r\n\r\n    if (symbol === '' || noShares === '' || shareValue === '') {\r\n      alert('Please input all data');\r\n      return;\r\n    }\r\n    this.props.addStock(symbol, noShares, shareValue);\r\n    this.setState({\r\n      symbol: '',\r\n      noShares: '',\r\n      shareValue: ''\r\n    })\r\n  }\r\n\r\n  handleChange = (propertyName, event) => {\r\n    const state = this.state;\r\n    state[propertyName] = event.target.value;\r\n    this.setState(state);\r\n  }\r\n\r\n  render() {\r\n    if (!this.props.show) {\r\n      return null;\r\n    }\r\n    const backdropStyle = {\r\n      position: 'fixed',\r\n      top: 0,\r\n      bottom: 0,\r\n      left: 0,\r\n      right: 0,\r\n      backgroundColor: 'rgba(0,0,0,0.3)',\r\n      padding: 50\r\n    };\r\n    const modalStyle = {\r\n      backgroundColor: '#fff',\r\n      borderRadius: 5,\r\n      maxWidth: 500,\r\n      minHeight: 300,\r\n      margin: '0 auto',\r\n      padding: 30\r\n    };\r\n\r\n    const stockRow = {\r\n      margin: '10px auto',\r\n      width: '100%',\r\n      textAlign: 'left'\r\n    }\r\n\r\n    const footer = {\r\n      left: '0',\r\n      bottom: '0',\r\n      width: '100%',\r\n      color: 'white',\r\n    }\r\n\r\n    return (\r\n      <div className=\"backdrop\" style={backdropStyle}>\r\n        <div className=\"modal\" style={modalStyle}>\r\n          <h4>Add a Stock</h4>\r\n          <div style={stockRow}>\r\n            Enter Stock Symbol:\r\n                <input type=\"text\" value={this.state.symbol} onChange={this.handleChange.bind(this, 'symbol')} />\r\n          </div>\r\n          <div style={stockRow}>\r\n            Enter Number of Shares:\r\n                <input type=\"number\" value={this.state.noShares} onChange={this.handleChange.bind(this, 'noShares')} />\r\n          </div>\r\n          <div style={stockRow}>\r\n            Current value of 1 share:\r\n                <input type=\"number\" value={this.state.shareValue} onChange={this.handleChange.bind(this, 'shareValue')} />\r\n          </div>\r\n          <div style={footer}>\r\n            <button onClick={this.handleSubmit}>\r\n              Submit\r\n                </button>\r\n            <button onClick={this.props.onClose}>\r\n              Close\r\n                </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddStock;\r\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Portfolios from './components/Portfolios';\nimport AddPortfolio from './components/AddPortfolio';\nimport AddStock from './components/AddStock';\n\nclass App extends Component {\n  state = {\n    portfolios: [\n    ],\n    isOpen: false,\n    currentPortfolioID: ''\n  };\n\n  componentDidMount () {\n    let portfolios = localStorage.getItem(\"portfolios\");\n    this.setState({\n      portfolios: portfolios ? JSON.parse(portfolios) : []\n    })\n  }\n\n  toggleModal = () => {\n    this.setState({\n      isOpen: !this.state.isOpen\n    });\n  }\n\n  openModal = (portfolioID) =>{\n    this.setState({\n      currentPortfolioID: portfolioID\n    })\n    this.toggleModal();\n  }\n\n  addPortfolio = (portfolioname) => {\n    const portfolios = this.state.portfolios;\n    const currentId = portfolios.length + 1;\n    this.setState({\n      portfolios: portfolios.concat([{'portfolioname': portfolioname, 'id': currentId, 'stocks': [], 'isUsd': false}])\n    }, () => {\n      localStorage.setItem('portfolios', JSON.stringify(this.state.portfolios))\n    })\n  }\n\n  addStock = (symbol, noShares, shareValue) => {\n    const totalValue = noShares * shareValue;\n    this.toggleModal();\n    this.setState({\n      portfolios: this.state.portfolios.map(portfolio => (portfolio.id === this.state.currentPortfolioID ? \n        Object.assign({}, portfolio, {'stocks': portfolio.stocks.concat([{'symbol':symbol, 'noShares': noShares, 'shareValue': shareValue, 'totalValue': totalValue, 'selected': false, 'portfolioWorth':0}])}) : portfolio) )\n    }, () => {\n      this.updatePortfolioWorth(this.state.currentPortfolioID);\n    });\n  }\n\n  updatePortfolioWorth = (portfolioID) => {\n    const portfolios = this.state.portfolios\n    console.log(portfolios);\n    this.setState({\n      portfolios: portfolios.map(portfolio => (\n        portfolio.id === portfolioID ? Object.assign({}, portfolio, {'portfolioWorth': portfolio.stocks.reduce((a, b) => a + b.totalValue, 0) + (portfolio.isUsd ? ' $' : ' â‚¬')}) : portfolio\n      ))\n    },  () => {\n      localStorage.setItem('portfolios', JSON.stringify(this.state.portfolios))\n    })\n  }\n\n  selectStock = (stockSymbol, portfolioID) => {\n    const portfolios = this.state.portfolios;\n    this.setState({\n      portfolios: portfolios.map(portfolio => (portfolio.id === portfolioID ? \n        Object.assign({}, portfolio,\n          {'stocks': portfolio.stocks.map(stock => (stock.symbol === stockSymbol ?\n          Object.assign({}, stock, {'selected': !stock.selected }) : stock))}) : portfolio))\n    })\n  }\n\n  deleteStocks = (portfolioID) => {\n    let isSelect = false;\n    const portfolios = this.state.portfolios;\n\n    this.setState({\n      portfolios: portfolios.map(portfolio => (portfolioID === portfolio.id ?\n          Object.assign({},portfolio,{'stocks': portfolio.stocks.filter(stock => !stock.selected)}) : portfolio\n      ))\n    }, () => {\n      this.updatePortfolioWorth(portfolioID);\n    })  \n  }\n\n  deletePortfolio = (portfolioID) => {\n    let deletePor = window.confirm('Confirm deleting this portfolio ?')\n    if(!deletePor) {\n      return;\n    }\n    const portfolios = this.state.portfolios;\n    this.setState({\n      portfolios: portfolios.filter(portfolio => portfolio.id !== portfolioID)\n    },  () => {\n      this.updatePortfolioWorth(portfolioID);\n    })\n  }\n\n  toggleCurrency = (portfolioID, isUsd) => {\n    const portfolios = this.state.portfolios;\n    this.setState({\n      portfolios: portfolios.map(portfolio => portfolio.id === portfolioID?\n          Object.assign({}, portfolio, {'isUsd': isUsd, 'stocks': portfolio.stocks.map(stock =>  isUsd ? \n            Object.assign({}, stock, {'shareValue': Math.round(1.2 * stock.shareValue), 'totalValue': Math.round(1.2 * stock.totalValue)}): \n            Object.assign({}, stock, {'shareValue': Math.round(stock.shareValue/1.2), 'totalValue': Math.round(stock.totalValue/1.2)})\n            )}) : portfolio\n        )\n    }, () => {\n      this.updatePortfolioWorth(portfolioID);\n    })\n  }\n\n  render(){\n    \n    return (\n      <div className=\"App\">\n        <h2> Stocks Portfolio Management System </h2>\n        <AddPortfolio addPortfolio={this.addPortfolio}/>\n        <h4>Portfolios List</h4>\n        <Portfolios portfolios={this.state.portfolios} openModal={this.openModal} selectStock={this.selectStock} \n        deleteStocks={this.deleteStocks} deletePortfolio={this.deletePortfolio} toggleCurrency={this.toggleCurrency}/>\n        <AddStock show={this.state.isOpen}\n          onClose={this.toggleModal} portfolioID={this.state.portfolioID} addStock={this.addStock}/>\n      </div>\n    );\n  }\n\n \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}